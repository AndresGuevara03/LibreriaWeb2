#include <stdio.h>
#include <stdlib.h>
#include <libstr.h>
#include <sys/time.h>

void setInputs(FILE* inputSource , FILE* inputTarget);
void getStatus(char** status, FILE* outputSource , FILE* outputTarget, int ms, int timeLimit);
int runSolution(char* problemName);
void openFile(char* problemName, FILE** inputFile, FILE** outputFile);

int main(int cantArgs, char** args){
  int numTest = 1;
  char** status = malloc(4 * sizeof(char*));
  FILE* inputs;
  FILE* outputs;
  char problemName[100];
  scanf("%s", problemName);
  openFile(problemName, &inputs, &outputs);
  int timeLimit = 1000;
  struct timeval stop, start;
  while(!feof(inputs)){
    FILE* input = fopen("inputs/input.txt", "w");
    setInputs(inputs, input);
    FILE* output = fopen("log.txt", "r");
    int ms = runSolution(problemName);
    getStatus(status, outputs, output, ms, timeLimit);
    printf("Test case #%d\n", numTest);
    printf("%s\r%s\r%s\r%s\r\n", status[0], status[1], status[2], status[3]);
    for(int i = 0; i < 3; i++){
      free(status[i]);
      status[i] = NULL;
    }
    numTest++;
  }
  free(status);
  status = NULL;
  fclose(inputs);
  fclose(outputs);
  return (EXIT_SUCCESS);
}

void setInputs(FILE* inputSource , FILE* inputTarget){
  char* line = NULL;
  size_t aux;
  while(getline(&line, &aux, inputSource) != -1 && strComp(line, "\n")){
    fputs(line, inputTarget);
  }
  fclose(inputTarget);
}

void getStatus(char** status, FILE* outputSource , FILE* outputTarget, int ms, int timeLimit){
  char* answer = NULL;
  char* out = NULL;
  size_t aux;
  int wrong = 0;
  char* temp = NULL;
  strCopy(&status[0], "output: ");
  strCopy(&status[1], "answer: ");
  while(getline(&answer, &aux, outputSource) != -1 && strComp(answer, "\n")){
    getline(&out, &aux, outputTarget);
    wrong |= strComp(answer, out);
    strCopy(&temp, out);
    concat(&status[0], temp);
    free(temp);
    temp = NULL;
    strCopy(&temp, answer);
    concat(&status[1], temp);
    free(temp);
    temp = NULL;
  }
  strCopy(&temp, "time: ");
  concat(&temp, intToStr(ms));
  concat(&temp, " ms\n");
  strCopy(&status[2], temp);
  free(temp);
  temp = NULL;
  if(ms >= timeLimit)
    status[3] = "status: Time limit exceeded\n";
  else if(wrong)
    status[3] = "status: Wrong answer\n";
  else
    status[3] = "status: Ok\n";
  fclose(outputTarget);
}

int runSolution(char* problemName){
  struct timeval stop, start;
  char* compile = NULL;
  strCopy(&compile, "javac pruebajava/");
  concat(&compile, problemName);
  concat(&compile, ".java");
  system(compile);
  char* run = NULL;
  strCopy(&run, "java pruebajava.");
  concat(&run, problemName);
  concat(&run, " > log.txt 2>&1 0< inputs/input.txt");
  gettimeofday(&start, NULL);
  int exitCode = system(run);
  gettimeofday(&stop, NULL);
  int ms = (stop.tv_sec - start.tv_sec) * 1000 + (stop.tv_usec - start.tv_usec) / 1000;
  free(compile);
  compile = NULL;
  free(run);
  run = NULL;
  return ms;
}

void openFile(char* problemName, FILE** inputFile, FILE** outputFile){
  char* inputPath = NULL;
  strCopy(&inputPath,"inputs/");
  concat(&inputPath, problemName);
  concat(&inputPath, ".txt");
  char* outputPath = NULL;
  strCopy(&outputPath,"outputs/");
  concat(&outputPath, problemName);
  concat(&outputPath, ".txt");
  *inputFile = fopen(inputPath, "r");
  *outputFile = fopen(outputPath, "r");
  free(inputPath);
  inputPath = NULL;
  free(outputPath);
  outputPath = NULL;
}
